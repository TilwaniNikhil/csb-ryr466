{"version":3,"sources":["App.js","index.js"],"names":["emojiDictionary","emojis","Object","keys","App","useState","emoji","setEmoji","meaning","setMeaning","className","onChange","event","inputEmoji","target","value","placeholder","style","padding","minWidth","map","onClick","fontSize","cursor","rootElement","document","getElementById","createRoot","render"],"mappings":"qLAGMA,EAAkB,CACtB,eAAM,UACN,eAAM,YACN,eAAM,MACN,eAAM,cACN,eAAM,OACN,eAAM,YACN,eAAM,oBACN,eAAM,WACN,eAAM,QACN,UAAW,YACX,eAAM,SAGFC,EAASC,OAAOC,KAAKH,GAEZ,SAASI,IACtB,MAA0BC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,mBAAS,kCAAiC,mBAAjEG,EAAO,KAAEC,EAAU,KAiB1B,OACE,sBAAKC,UAAU,MAAK,UAClB,iDACA,uBACEC,SAnBN,SAAuBC,GACrB,IAAMC,EAAaD,EAAME,OAAOC,MAChCR,EAASM,GAGPJ,EADEI,KAAcb,EACLA,EAAgBa,GAEhB,kCAEf,EAWME,MAAOT,EACPU,YAAa,oBACbC,MAAO,CACLC,QAAS,MACTC,SAAU,SAGd,mCAAMb,EAAK,OAAO,IAClB,mCAAME,EAAO,OAAO,IACnBP,EAAOmB,KAAI,SAACd,GAAK,OAChB,uBACEe,QAAS,WAnBfZ,EAAWT,EAmB4BM,GAAM,EACvCW,MAAO,CAAEK,SAAU,OAAQJ,QAAS,SAAUK,OAAQ,WAAY,UAEjE,IACAjB,EAAO,MACH,MAIf,CC1DA,IAAMkB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACxB,EAAG,M","file":"static/js/main.dd72d75b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nconst emojiDictionary = {\n  \"üòä\": \"Smiling\",\n  \"üò≥\": \"disbelief\",\n  \"üòî\": \"sad\",\n  \"ü•°\": \"takeout box\",\n  \"‚ù§Ô∏è\": \"love\",\n  \"üòë\": \"annoyance\",\n  \"üòç\": \"You Are Beautiful\",\n  \"ü§î\": \"Thinking\",\n  \"ü•≥\": \"Party\",\n  \"       \": \"Invisible\",\n  \"üòé\": \" Cool\"\n};\n\nconst emojis = Object.keys(emojiDictionary);\n\nexport default function App() {\n  const [emoji, setEmoji] = useState(\"\");\n  const [meaning, setMeaning] = useState(\"translation will appear here..\");\n\n  function changeHandler(event) {\n    const inputEmoji = event.target.value;\n    setEmoji(inputEmoji);\n\n    if (inputEmoji in emojiDictionary) {\n      setMeaning(emojiDictionary[inputEmoji]);\n    } else {\n      setMeaning(\"failure to recognise this emoji\");\n    }\n  }\n\n  function emojiClickHandler(inputEmoji) {\n    setMeaning(emojiDictionary[inputEmoji]);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>inside outttttt</h1>\n      <input\n        onChange={changeHandler}\n        value={emoji}\n        placeholder={\"Search your emoji\"}\n        style={{\n          padding: \"1em\",\n          minWidth: \"80%\"\n        }}\n      />\n      <h2> {emoji} </h2> {/** Concept 1: JSX */}\n      <h3> {meaning} </h3> {/** how much part is re-rendered. */}\n      {emojis.map((emoji) => (\n        <span\n          onClick={() => emojiClickHandler(emoji)}\n          style={{ fontSize: \"2rem\", padding: \"0.5rem\", cursor: \"pointer\" }}\n        >\n          {\" \"}\n          {emoji}{\" \"}\n        </span>\n      ))}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}